#!/usr/bin/python

"""Standalone implementation for 'docker ssh'

Implements root user correctly.
Correctly decodes port vs. control socket specifiers
Ha ha, 'docker ssh' doesn't do buffering properly for scp.
"""

import sys, os
import subprocess
import json
import random

user = 'docker'
opts = []
args = list(sys.argv[1:])
inArgs = True
machine = None
port = None
hostName = None
opt_n = False
opt_f = False

controlPath = None
controlMaster = 'no'
controlPersist = 'no'

while args:

    if args[0] == '--':
        args.pop(0)
        inArgs = False
        continue

    if inArgs and args[0] == '-o':
        if args[1].startswith('User='):
            args.pop(0)
            user = args.pop(0)[5:]
        elif args[1].startswith('Port='):
            args.pop(0)
            port = int(args.pop(0)[5:])
        elif args[1].startswith('ControlPath='):
            args.pop(0)
            controlPath = args.pop(0)[12:]
        elif args[1].startswith('ControlMaster='):
            args.pop(0)
            controlMaster = args.pop(0)[14:]
        elif args[1].startswith('ControlPersist='):
            args.pop(0)
            controlPersist = args.pop(0)[15:]
        elif args[1].startswith('HostName='):
            args.pop(0)
            HostName = args.pop(0)[9:]
        else:
            opts.append(args.pop(0))
            opts.append(args.pop(0))
        continue

    if inArgs and args[0].startswith('-o'):
        if args[0].startswith('-oUser='):
            user = args.pop(0)[7:]
        elif args[0].startswith('-oPort='):
            port = int(args.pop(0)[7:])
        elif args[0].startswith('-oControlPath='):
            controlPath = args.pop(0)[14:]
        elif args[0].startswith('-oControlMaster='):
            controlMaster = args.pop(0)[16:]
        elif args[0].startswith('-oControlPersist='):
            controlPersist = args.pop(0)[17:]
        elif args[0].startswith('-oHostName='):
            hostName = args.pop(0)[11:]
        else:
            opts.append(args.pop(0))
        continue

    if inArgs and args[0].startswith('-'):

        if args[0][1] in "1246AaCfGgKkMNnqsTtVvXxYy":
            flags = args.pop(0)[1:]
            if 'n' in flags:
                opt_n = True
            if 'f' in flags:
                opt_f = True
            if 'M' in flags:
                flags = flags.replace('M', '')
                controlMaster = 'yes'
            if flags:
                opts.append('-' + flags)
            continue

        if len(args[0]) == 2:
            if args[0] == '-l':
                args.pop(0)
                user = args.pop(0)
            elif args[0] == '-p':
                args.pop(0)
                port = int(args.pop(0))
            elif args[0] == '-S':
                args.pop(0)
                controlPath = args.pop(0)
            else:
                opts.append(args.pop(0))
                opts.append(args.pop(0))
        else:
            if args[0].startswith('-l'):
                user = args.pop(0)[2:]
            elif args[0].startswith('-p'):
                port = int(args.pop(0)[2:])
            elif args[0].startswith('-S'):
                controlPath = args.pop(0)[2:]
            else:
                opts.append(args.pop(0))

        continue

    if machine is None:
        machine = args.pop(0)
        u, s, m = machine.partition('@')
        if s:
            user = u
            machine = m
        continue

    break

if machine is None:
    sys.stderr.write("*** missing machine\n")
    sys.exit(1)

cmd = ('docker-machine', 'inspect', machine,)
try:
    buf = subprocess.check_output(cmd)
except subprocess.CalledProcessError, what:
    if what.output is not None:
        sys.stderr.write(what.output)
    sys.stderr.write("*** docker-machine inspect failed\n")
    sys.exit(what.returncode)
data = json.loads(buf)
p = data.get('Driver', {}).get('SSHPort', None)
if p is not None and p != 22:
    port = p
storePath = data['StorePath']
sshKey = os.path.join(storePath, 'id_rsa')

def _e(arg):
    r = ""
    for c in arg:
        if c in '";&<>{}()':
            r += "'" + c + "'"
        elif c in "$`":
            r += "'" + c + "'"
        elif c in " \t\r\n\f\v":
            r += '"' + c + '"'
        else:
            r += c
    return r

if not args:
    opts.append('-oRequestTTY=force')
    args = ('/bin/sh', '-c', 'IFS=; . ~/.profile; exec $SHELL -i',)
remoteCmd = '" "'.join([_e(x) for x in args])

if user == 'root':
    remoteCmd = "IFS=; sudo -- /bin/sh -c %s" % remoteCmd
    user = 'docker'
elif user != 'docker':
    # gd tinycore, only two users supported
    remoteCmd = "IFS=; sudo -- /bin/su -c %s %s" % (remoteCmd, user,)
    user='docker'

# HACK HACK HACK
# not clear how to compute the real hypervisor address
if data['DriverName'] == 'vmwarefusion':
    # See machine/drivers/vmwarefusion/fusion.go
    hostName = data['Driver']['IPAddress']
else:
    # See machine/drivers/virtualbox/virtualbox.go
    hostName = 'localhost'

if user is not None:
    opts.append('-oUser=' + user)

# is this a direct connection or a multiplexed connection?
if controlPath is not None:
    opts.append('-oControlPath=' + controlPath)
if controlMaster is not None:
    opts.append('-oControlMaster=' + controlMaster)
if controlPersist is not None:
    opts.append('-oControlPersist=' + controlPersist)

# specifying an explicit port disables the control path multiplexor
if ((controlMaster is None or controlMaster == 'no')
    and controlPath is not None
    and os.path.exists(controlPath)):
    port = None
    hostName = '192.0.2.%d' % random.randint(1, 254)
    # TEST-NET-1

if port is not None:
    opts.append('-oPort=' + str(port))
if hostName is not None:
    opts.append('-oHostName=' + hostName)

if os.path.exists(sshKey):
    opts.append('-oIdentityFile=' + sshKey)
else:
    sys.stderr.write("*** missing key %s\n" % sshKey)

# scrape this from 'docker-machine --debug scp'
cmd = ['ssh',
       '-oPasswordAuthentication=no',
       '-oIdentitiesOnly=yes',
       '-oStrictHostKeyChecking=no',
       '-oUserKnownHostsFile=/dev/null',
       '-oLogLevel=quiet',
       '-oConnectionAttempts=3',
       '-oConnectTimeout=10',
       machine,
       '--',
       '/bin/sh', '-c', remoteCmd,]

cmd[1:1] = opts

kwargs = {}
if opt_n:
    kwargs['stdin'] = os.open(os.devnull, os.O_RDONLY)
try:
    subprocess.check_call(cmd, **kwargs)
except subprocess.CalledProcessError, what:
    if what.output is not None:
        sys.stderr.write(what.output)
    sys.stderr.write("*** ssh failed\n")
    sys.exit(what.returncode)
sys.exit(0)
