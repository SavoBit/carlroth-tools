#!/usr/bin/python

"""push-switch
"""

import sys, os
import glob
import time
import subprocess
import tempfile

bindir = os.path.abspath(os.path.dirname(__file__))
toolsdir = os.path.dirname(os.path.dirname(bindir))
sys.path.append(os.path.join(toolsdir, "src/python"))

import ConsoleUtils, IpUtils

switch = sys.argv[1]

if switch == "qemu":
    switch = "fe80::5054:ff:fe9b:57a7"

if ':' in switch:
    addr = "%s%%%s" % (switch, IpUtils.getDefaultV6Intf(),)
    sub = ConsoleUtils.SwitchRootSubprocess(addr, user='root')
elif '.' in switch:
    sub = ConsoleUtils.SwitchRootSubprocess(switch, user='root')
else:
    sub = ConsoleUtils.SwitchRootSubprocess.fromTrack(switch)
if sub is None:
    raise SystemExit("cannot find switch")

def do_enable_pcli_ssh():
    """migrate the SSH key to the actual startup-config"""

    cfg = tempfile.mktemp(prefix="startup-",
                          suffix=".cfg")

    with open(os.environ['TESTS_SSH_KEY']+'.pub') as fd:
        sshkeyBuf = fd.read().strip()

    try:
        sub.check_scp("/mnt/onl/config/startup-config", cfg,
                      host=switch, user="root",
                      direction=ConsoleUtils.IN, quote=False)
    except subprocess.CalledProcessError:
        with open(cfg, "w") as fd:
            fd.write("! generated by push-switch\n")

    try:

        with open(cfg) as fd:
            cfgBuf = fd.read()
        if "username admin ssh-key" not in cfgBuf:
            p = cfgBuf.find("username admin password")
            q = cfgBuf.find("\n", p+23)
            cfgBuf = (cfgBuf[:q+1]
                      + "username admin ssh-key '%s'\n" % sshkeyBuf
                      + cfgBuf[q+1:])
            with open(cfg, "w") as fd:
                fd.write(cfgBuf)
            try:
                cmd = ('onl-mounts', 'mount', '--rw', 'CONFIG',)
                sub.check_call(cmd)

                sub.check_scp(cfg, "/mnt/onl/config/startup-config",
                              host=switch, user="root",
                              direction=ConsoleUtils.OUT, quote=False)

            finally:
                cmd = ('onl-mounts', 'mount', '--ro', 'CONFIG',)
                sub.check_call(cmd)

    finally:
        if os.path.exists(cfg):
            os.unlink(cfg)

if sub.testBatchSsh():
    print "root ssh ok"
else:
    print "root ssh not ok"

    ##tsub = ConsoleUtils.TrackConsoleSubprocess(switch)
    ##tsub.enableRoot()

    sub.enableRoot()

    if not sub.testBatchSsh():
        raise SystemExit("cannot enable root")

do_enable_pcli_ssh()

srcdir = os.environ.get('SWL')
pydir = "/usr/lib/python2.7/dist-packages"

def do_py(src, dst):
    srcpat = os.path.join(srcdir, src, "*.py")
    dstdir = os.path.join(pydir, dst, ".")
    dstpat = os.path.join(pydir, dst, "*.pyc")
    args = glob.glob(srcpat) + [dstdir,]
    sub.check_scp(*args,
                  direction=ConsoleUtils.OUT, quote=False)
    sub.check_call(('rm', '-v', '-f', dstpat,),)

if False:

    src = os.path.join(srcdir, "packages/base/all/slrest/src/bin/slrest.py")
    dst = "/usr/bin/slrest"
    sub.check_scp(src, dst,
                  host=switch, user="root",
                  direction=ConsoleUtils.OUT, quote=False)
    sub.check_call(('chmod', '+x', "/usr/bin/slrest",))

    do_py("packages/base/all/slrest/src/python/slrest/base",
          "slrest/base")
    do_py("packages/base/all/slrest/src/python/slrest/api/v1",
          "slrest/api/v1")
    do_py("packages/base/all/slconfig/src/python/slrest/api/v1_status",
          "slrest/api/v1_status")
    do_py("packages/base/all/slconfig/src/python/slrest/api/v1_config",
          "slrest/api/v1_config")

    dst = os.path.join(pydir, "swl/test")
    sub.check_call(('mkdir', '-p', dst,))
    do_py("packages/base/all/vendor-config-swl/src/python/swl/test",
          "swl/test")

if False:

    swldir = os.path.join(srcdir, "packages/base/all/slconfig/src/python/swl")
    for subdir in os.listdir(swldir):
       swlsrc = os.path.join(swldir, subdir, "__init__.py")
       src = os.path.join("packages/base/all/slconfig/src/python/swl", subdir)
       dst = os.path.join("swl", subdir)
       if os.path.exists(swlsrc):
          do_py(src, dst)

if False:

    src = os.path.join(srcdir, "packages/base/all/pcli/pcli-test")
    dst = "/usr/bin/pcli-test"
    sub.check_scp(src, dst,
                  host=switch, user="root",
                  direction=ConsoleUtils.OUT, quote=False)
    sub.check_call(('chmod', '+x', "/usr/bin/pcli-test",))

    do_py("packages/base/all/pcli/builds/src",
          "pcli")

    dst = os.path.join(pydir, "pcli/test")
    sub.check_call(('mkdir', '-p', dst,))
    do_py("packages/base/all/pcli/builds/src/test",
          "pcli/test")

    do_py("packages/base/all/pcli/builds/src/desc/version001",
          "pcli/desc/version001")

if False:

    do_py("packages/base/all/ztn/src/python/ztn",
          "ztn")

if False:

    do_py("sm/ONL/packages/base/all/vendor-config-onl/src/python/onl/install",
          "onl/install")
    do_py("sm/ONL/packages/base/all/vendor-config-onl/src/python/onl/mounts",
          "onl/mounts")

if False:

    do_py("sm/ONL/packages/base/any/onlp/src/onlp/module/python/AIM",
          "AIM")
    do_py("sm/ONL/packages/base/any/onlp/src/onlp/module/python/BigList",
          "BigList")
    do_py("sm/ONL/packages/base/any/onlp/src/onlp/module/python/cjson_util",
          "cjson_util")
    do_py("sm/ONL/packages/base/any/onlp/src/onlp/module/python/onlp",
          "onlp")
    do_py("sm/ONL/packages/base/any/onlp/src/onlp/module/python/onlp/onlp",
          "onlp/onlp")
    do_py("sm/ONL/packages/base/any/onlp/src/onlp/module/python/onlp/test",
          "onlp/test")
    do_py("sm/ONL/packages/base/any/onlp/src/onlplib/module/python/onlp/onlplib",
          "onlp/onlplib")
    do_py("sm/ONL/packages/base/any/onlp/src/sff/module/python/onlp/sff",
          "onlp/sff")

    src = os.path.join(srcdir, "sm/ONL/packages/base/any/onlp/src/onlpdump.py")
    dst = "/usr/bin/onlpdump.py"
    sub.check_scp(src, dst,
                  host=switch, user="root",
                  direction=ConsoleUtils.OUT, quote=False)
    sub.check_call(('chmod', '+x', "/usr/bin/onlpdump.py",))

##srcdir = "/home/roth/work/switch/cherrypy"
##do_py("cherrypy/wsgiserver",
##      "cherrypy/wsgiserver")

if True:

    plist = tempfile.mktemp(prefix="package-",
                            suffix=".lst")
    ONLPM = os.path.join(os.getenv('SWL'), "sm/ONL/tools/onlpm.py")

    # pretend to handle setup.env
    os.environ['ONL'] = "%(SWL)s/sm/ONL" % os.environ
    os.environ['ONLPM_OPTION_PACKAGEDIRS'] = ("%(ONL)s/packages:%(ONL)s/builds:%(SWL)s/packages:%(SWL)s/builds"
                                              % os.environ)
    os.environ['ONLPM_OPTION_REPO'] = "%(SWL)s/REPO" % os.environ


    try:
        cmd = ('onl-mounts', 'mount', '--rw', 'DATA',)
        sub.check_call(cmd)

        cmd = ('mkdir', '-p', '/mnt/onl/data/install-debs',)
        sub.check_call(cmd)

        with open(plist, "w") as fd:

            for pkg in ('swl-vendor-config-swl', 'swl-vendor-config-swl-test',
                        'swl-slconfig',
                        'swl-slrest',
                        'swl-ztn',
                        'swl-pcli', 'swl-pcli-test',):
                cmd = (ONLPM, '--lookup', pkg + ':all',)
                p = subprocess.check_output(cmd).strip().splitlines(False)
                if not p:
                    raise ValueError("cannot find package %s" % pkg)
                _, b = os.path.split(p[0])
                dst = os.path.join("/mnt/onl/data/install-debs", b)
                sub.check_scp(p[0], dst,
                              host=switch, user="root",
                              direction=ConsoleUtils.OUT, quote=False)
                fd.write(b)
                fd.write("\n")

        sub.check_scp(plist, "/mnt/onl/data/install-debs/list",
                      host=switch, user="root",
                      direction=ConsoleUtils.OUT, quote=False)

    finally:

        cmd = ('onl-mounts', 'mount', '--ro', 'DATA',)
        sub.check_call(cmd)

        if os.path.exists(plist):
            os.unlink(plist)

    sub.check_call(('/etc/boot.d/53.install-debs',))

if True:
    sub.check_call(('service', 'slrest', 'stop',))
    sub.check_call(('service', 'slrest', 'start',))

    try:
        script = tempfile.mktemp(prefix="startup-",
                                 suffix=".sh")
        with open(script, "w") as fd:
            fd.write("#!/bin/sh\n")
            fd.write("set -e\n")
            fd.write("set -x\n")
            fd.write("service startup-config start\n")
            # this resets the ssh login info to defaults
            # Ugh it also breaks the /root permissions
            fd.write("chmod 0755 /root\n")
            fd.write("exit 0")

        sub.check_scp(script, script,
                      host=switch, user="root",
                      direction=ConsoleUtils.OUT, quote=False)

        sub.check_call(('/bin/sh', script,))
    finally:
        os.unlink(script)
        sub.check_call(('rm', '-f', script,))

    psub = ConsoleUtils.SwitchPcliSubprocess(sub.host, user='root')
    time.sleep(3.0)
    psub.call("show version")
    sub.check_call(('slrest', 'help',))

sys.exit(0)
