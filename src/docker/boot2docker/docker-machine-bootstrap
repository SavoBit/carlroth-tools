#!/usr/bin/python

"""docker-machine-bootstrap

Initial setup of a new docker machine.
"""

import sys
import os
import subprocess
import json
import socket, struct
import argparse
import logging
import tempfile
import shutil

DOCKER_MACHINE_SSH = "docker-machine-ssh"
NFSOPTS = "rsize=65536,wsize=65536,intr,noatime"

def inet_aton(addr):
    addrBytes = socket.inet_aton(addr)
    addrInt = struct.unpack(">I", addrBytes)[0]
    return addrInt

def inet_ntoa(addrInt):
    addrBytes = struct.pack(">I", addrInt)
    return socket.inet_ntoa(addrBytes)

def inet_bitston(numBits):
    numBits = int(numBits)
    numBits = 32-numBits
    maskInt = (1<<numBits)-1
    maskInt = maskInt ^ 0xffffffff
    return maskInt

def inet_bitstoa(numBits):
    maskInt = inet_bitston(numBits)
    return inet_ntoa(maskInt)

def getShowmount(host):
    cmd = ('showmount', '-e', host,)
    buf = subprocess.check_output(cmd)
    e = {}
    for line in buf.splitlines()[1:]:
        words = line.strip().split()
        v = words.pop(0)
        e[v] = words
    return e

PROFILE_TAIL = """\
# BEGIN profile.tail
#
##############################

DMB_STOREPATH="%(storePath)s"
DMB_VOLUMES="%(volumes)s"
DMB_HOST="%(host)s"
DMB_NFSOPTS="%(nfsopts)s"
DMB_CONTAINER_USER="docker-container"
DMB_CONTAINER_UID="%(uid)s"
DMB_CONTAINER_GROUP="docker-container"
DMB_CONTAINER_GID="%(gid)s"
DMB_CONTAINER_PUBKEY="%(pubkey)s"

if test -f /var/lib/boot2docker/rc.local; then
  . /var/lib/boot2docker/rc.local || :
fi

##############################
#
# END profile.tail
"""

class Bootstrap:

    def __init__(self, machine, srcdir,
                 uid=None, gid=None,
                 volumes=[],
                 log=None):
        self.log = log or logging.getLogger(self.__class__.__name__)
        self.machine = machine
        self.srcdir = srcdir
        self.volumes = volumes
        self.uid = uid
        self.gid = gid

        self.data = {}
        self.hostAddr = self.machineAddr = self.netmask = self.network = None
        self._inspect()

    def _inspect(self):
        cmd = ('docker-machine', 'inspect', self.machine,)
        self.data = json.loads(subprocess.check_output(cmd))

        self.machineAddr = self.data['Driver']['IPAddress']
        self.log.info("machine address %s", self.machineAddr)

        if 'HostOnlyCIDR' in self.data['Driver']:
            # VirtualBox
            self.hostAddr, sep, bits = self.data['Driver']['HostOnlyCIDR'].partition('/')
            self.log.info("host address %s", self.hostAddr)
            bits = int(bits)
        else:
            # likely Fusion
            bits = 24
            addrInt = inet_aton(self.machineAddr)
            maskInt = inet_bitston(int(bits))
            addrInt &=  maskInt
            addrInt |= 0x00000001
            self.hostAddr = inet_ntoa(addrInt)
            self.log.warn("no CIDR address, assuming %s/%d",
                          self.hostAddr, bits)

        self.netmask = inet_bitstoa(bits)
        self.log.info("netmask %s", self.netmask)

        addrInt = inet_aton(self.machineAddr)
        maskInt = inet_aton(self.netmask)
        netInt = addrInt & maskInt
        self.network = inet_ntoa(netInt)
        self.log.info("network %s", self.network)

    def setUpProfile(self):

        self.log.info("updating boot2docker profile")
        profilePath = tempfile.mktemp(prefix="profile-")
        cmd = ('docker-machine', 'scp', self.machine + ':' + '/var/lib/boot2docker/profile', profilePath,)
        subprocess.check_call(cmd)
        with open(profilePath) as fd:
            profileBuf = fd.read()

        p = profileBuf.find("\n# BEGIN profile.tail")
        if p > -1:
            q = profileBuf.find("# END profile.tail\n")
            if q > -1:
                profileBuf = (profileBuf[:p+1]
                              + profileBuf[q+19:])
            else:
                profileBuf = profileBuf[:p+1]

        with open(os.path.join(self.data['StorePath'], 'id_rsa.pub')) as fd:
            keybuf = fd.read().strip()
        ctx = dict(storePath=self.data['StorePath'],
                   volumes=" ".join(self.volumes),
                   uid=self.uid or "", gid=self.gid or "",
                   host=self.hostAddr,
                   pubkey=keybuf,
                   nfsopts=NFSOPTS)
        with open(profilePath, "w") as fd:
            fd.write(profileBuf)
            fd.write(PROFILE_TAIL % ctx)

        cmd = ('scp', '-oUser=root', '-S', DOCKER_MACHINE_SSH,
               profilePath, self.machine + ':' + '/var/lib/boot2docker/profile',)
        self.log.info("command %s", cmd)
        try:
            subprocess.check_call(cmd)
        except subprocess.CalledProcessError, what:
            self.log.error("scp failed")
            return what.returncode
        os.unlink(profilePath)

        self.log.info("installing rc.local")
        rcPath = os.path.join(self.srcdir, "rc.local")
        cmd = ('scp', '-S', DOCKER_MACHINE_SSH, '-oUser=root',
               rcPath, self.machine + ':' + '/var/lib/boot2docker/rc.local',)
        try:
            subprocess.check_call(cmd)
        except subprocess.CalledProcessError, what:
            self.log.error("scp failed")
            return what.returncode

        self.log.info("invoking rc.local")
        cmd = (DOCKER_MACHINE_SSH, '-oUser=root',
               self.machine,
               '--', '/bin/sh', '-c', 'IFS=; set -e; set -x; . /var/lib/boot2docker/profile',)
        try:
            subprocess.check_call(cmd)
        except subprocess.CalledProcessError, what:
            self.log.error("ssh failed")
            return what.returncode

        return 0

    def setUpExports(self):

        exports = getShowmount(self.hostAddr)
        self.log.info("found exports for %s", ", ".join(exports))

        needsRestart = False
        for volume in self.volumes:
            needsExport = False
            if volume not in exports:
                self.log.warn("missing export for %s", volume)
                needsExport = True
                needsRestart = True
            elif self.network not in exports[volume]:
                self.log.warn("missing export for %s --> %s", self.network, volume)
                needsExport = True
                needsRestart = True
            if needsExport:
                self.log.info("adding export for %s --> %s", self.network, volume)
                fno, exportPath = tempfile.mkstemp(prefix='exports-')
                with os.fdopen(fno, "w") as fd:
                    with open("/etc/exports") as fd2:
                        fd.write(fd2.read())
                    fd.write("%s -alldirs -maproot=root:wheel -network %s -mask %s\n"
                             % (volume, self.network, self.netmask,))
                if os.getuid() == 0:
                    shutil.copy(exportPath, "/etc/exports")
                else:
                    cmd = ('sudo', 'cp', exportPath, "/etc/exports",)
                    subprocess.check_call(cmd)
                os.unlink(exportPath)
        if needsRestart:
            self.log.info("restarting nfsd")
            if os.getuid() == 0:
                cmd = ('nfsd', 'restart',)
            else:
                cmd = ('sudo', 'nfsd', 'restart',)
            subprocess.check_call(cmd)

        # test the final result to make sure we are actually exporting
        exports = getShowmount(self.hostAddr)
        foundAll = True
        for volume in self.volumes:
            if volume not in exports:
                self.log.warn("unable to export %s", volume)
                foundAll = False
            if self.network not in exports[volume]:
                self.log.warn("unable to export %s --> %s", self.network, volume)
                foundAll = False
        if not foundAll:
            self.log.error("not all volumes were exported")
            return 1

        return 0

    def run(self):

        if sys.platform != 'darwin':
            self.log.error("hurr, this is meant for MacOS")
            return 1

        # sanitize the volumes,
        # since docker-machine uses the basename as the volume
        vnames = set()
        for v in self.volumes:
            d, b = os.path.split(v)
            if b in vnames:
                self.log.error("ambigous volume name %s", b)
                return 1
            vnames.add(b)

        code = self.setUpProfile()
        if code: return code

        if self.volumes:
            code = self.setUpExports()
            if code: return code

        return 0

    def shutdown(self):
        pass

USAGE = """\
docker-machine-bootstrap [OPTIONS] MACHINE

Export MacOS volumes to docker containers via NFS,
to work around hypervisor guest volume driver bugs.
"""

EPILOG = """\
Useful volume arguments include

  --volume /Users

    to map the default MacOS Users share,
    replacing the hypervisor driver with a proper NFS mount

  --volume /Volumes/data

    for other volumes
"""

ap = argparse.ArgumentParser(usage=USAGE,
                             epilog=EPILOG,
                             formatter_class=argparse.RawDescriptionHelpFormatter)

ap.add_argument("machine", type=str,
                help="Docker machine name")

ap.add_argument("--volume", action='append',
                help="Add an NFS volume (can be specified multiple times)")

ap.add_argument('--container-uid', type=int, dest='uid',
                help="Userland UID for docker containers")
ap.add_argument('--container-gid', type=int, dest='gid',
                help="Userland UID for docker containers")

def main():
    logging.basicConfig()
    logger = logging.getLogger("dmb")
    logger.setLevel(logging.DEBUG)

    try:
        opts = ap.parse_args()
    except SystemExit, what:
        sys.exit(what.code)

    b = Bootstrap(opts.machine,
                  os.path.dirname(__file__),
                  volumes=opts.volume,
                  uid=opts.uid, gid=opts.gid,
                  log=logger)
    try:
        code = b.run()
    except:
        logger.exception("runner failed")
        code = 1
    b.shutdown()
    sys.exit(code)

if __name__ == "__main__":
    main()
